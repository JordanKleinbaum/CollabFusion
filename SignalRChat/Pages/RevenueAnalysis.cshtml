@page
@model SignalRChat.Pages.RevenueAnalysisModel
@{
}
<div class="container" style="margin: 0 auto; padding: 20px; background-color: #fff; border-radius: 8px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);">

    <h2>X-Axis Selection:</h2>
    <div>
        <input type="radio" name="xAxis" value="allColumns" id="xAllColumnsRadio" onchange="populateXDropdown()"> All Columns
        <input type="radio" name="xAxis" value="allRows" id="xAllRowsRadio" onchange="populateXDropdown()"> All Rows
    </div>
    <select id="xAxisDropdown" class="form-control">
        <!-- Options will be dynamically populated here -->
        <option selected disabled>Select A Radio Button</option>


    </select>
    <p>Use value <span id="xAxisValue"></span> for x-axis</p>

    <h2>Y-Axis Selection:</h2>
    <div>
        <input type="radio" name="yAxis" value="allColumns" id="yAllColumnsRadio" onchange="populateYDropdown()"> All Columns
        <input type="radio" name="yAxis" value="allRows" id="yAllRowsRadio" onchange="populateYDropdown()"> All Rows
    </div>
    <select id="yAxisDropdown" class="form-control">
        <!-- Options will be dynamically populated here -->
        <option selected disabled>Select A Radio Button</option>

    </select>
    <p>Use value <span id="yAxisValue"></span> for y-axis</p>

    <div style="display: flex; flex-direction: column; gap: 0.5em;">
        <div>
            <h2>Chart Type:</h2>
        </div>
        <div >
            <select id="ChartType" class="form-control">
                <option selected disabled>Select Chart Type</option>
                <option>bar</option>
                <option>line</option>
                <option>pie</option>
                <option>doughnut</option>
            </select>
        </div>
        <div >
            <button id="ID" class="btn" style="background-color: #293a7f; color: white; border-radius: 20px; padding: 10px 20px; border: none; cursor: pointer;">Show Graph</button>
        </div>
    </div>
    <hr />

    <div id="ChartView" style="margin-top: 20px; text-align: center; max-width: 42em; margin: auto;">
        <canvas id="myChart" style="max-width: 100%; margin: 0 auto;"></canvas>
    </div>

    <hr />
    <h2>Save Analysis</h2>

    <form asp-page="RevenueAnalysis" style="margin-top: 20px;" method="post">
        <div class="form-group">
            <label class="form-label">Analysis Title</label>
            <input asp-for="AnalysisName" class="form-control" placeholder="Enter Analysis Title">
            <span asp-validation-for="AnalysisName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label class="form-label">Analysis Description</label>
            <textarea asp-for="AnalysisDescription" class="form-control" rows="4" placeholder="Enter Analysis Description"></textarea>
            <span asp-validation-for="AnalysisDescription" class="text-danger"></span>
        </div>

        <input type="hidden" name="fileName" value="@Request.Query["fileName"]" />

        <button type="submit" class="btn btn-custom" style="background-color: #293a7f; color: white; border-radius: 20px; padding: 10px 20px; border: none; cursor: pointer;">Save Analysis</button>
    </form>

</div>


@*ChartJS*@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        var xAxisData = @Html.Raw(Json.Serialize(Model.XAxisData));
        var yAxisData = @Html.Raw(Json.Serialize(Model.YAxisData));
        var xAxisTitle = "@Model.XAxisTitle";
        var yAxisTitle = "@Model.YAxisTitle";

        // Function to create the initial chart on page load
        function createChart(chartType) {
            const ctx = $('#myChart');
            new Chart(ctx, {
                type: chartType,
                data: {
                    labels: xAxisData,
                    datasets: [{
                        label: yAxisTitle,
                        data: yAxisData,
                        borderWidth: 1,
                        backgroundColor: getRandomColorArray(yAxisData.length),
                        fill: false, // Prevent area fill below line
                        borderColor: 'rgb(75, 192, 192)', // Line color
                        tension: 0.1 // Adjust curve tension (0 for straight lines)
                    }]
                },
                options: {
                    animation: {
                        // Add animation delay in milliseconds
                        delay: 500,
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: xAxisTitle
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: yAxisTitle
                            },
                            beginAtZero: true
                        }
                    },

                }
            });
        }

        // Call the function to create the initial chart on page load
        // createChart('line');

        // Event listener for changing chart type
        $("#ID").click(function () {
            var chartType = $("#ChartType").val();
            var chartView = document.getElementById("ChartView");

            chartView.innerHTML = '&nbsp;';
            $('#ChartView').append('<canvas id="myChart"></canvas>');

            createChart(chartType);
        });
    });

    // Function to generate an array of random colors
    function getRandomColorArray(length) {
        var colors = [];
        for (var i = 0; i < length; i++) {
            var randomColor = 'rgba(' + Math.floor(Math.random() * 256) + ',' + Math.floor(Math.random() * 256) + ',' + Math.floor(Math.random() * 256) + ', 0.7)';
            colors.push(randomColor);
        }
        return colors;
    }

    function populateXDropdown() {
        var select = document.getElementById("xAxisDropdown");
        var xAllColumnsRadio = document.getElementById("xAllColumnsRadio");
        var xAllRowsRadio = document.getElementById("xAllRowsRadio");

        select.innerHTML = ""; // Clear existing options

        if (xAllColumnsRadio.checked) {
            var allColumnsOptions = ["Column A", "Column B", "Column C"];
            allColumnsOptions.forEach(function (item) {
                var option = document.createElement("option");
                option.text = item;
                select.add(option);
            });
        } else if (xAllRowsRadio.checked) {
            var allRowsOptions = ["Row 1", "Row 2", "Row 3"];
            allRowsOptions.forEach(function (item) {
                var option = document.createElement("option");
                option.text = item;
                select.add(option);
            });
        }

        document.getElementById("xAxisValue").innerText = select.value;
    }

    function populateYDropdown() {
        var select = document.getElementById("yAxisDropdown");
        var yAllColumnsRadio = document.getElementById("yAllColumnsRadio");
        var yAllRowsRadio = document.getElementById("yAllRowsRadio");

        select.innerHTML = ""; // Clear existing options

        if (yAllColumnsRadio.checked) {
            var allColumnsOptions = ["Column A", "Column B", "Column C"];
            allColumnsOptions.forEach(function (item) {
                var option = document.createElement("option");
                option.text = item;
                select.add(option);
            });
        } else if (yAllRowsRadio.checked) {
            var allRowsOptions = ["Row 1", "Row 2", "Row 3"];
            allRowsOptions.forEach(function (item) {
                var option = document.createElement("option");
                option.text = item;
                select.add(option);
            });
        }

        document.getElementById("yAxisValue").innerText = select.value;
    }
</script>